bug: 6650

----
300414
problem summary:

different errors:

complaining about warrants emergency flag not null
possible cause:
some of the models have changed?

Connector not starting
possible cause:
different package combinations, when most packages are updated connector and vims_comms don't start
with original packages, vims_comms not starting, connector starting and tests passing
with bottom half original packages (including fusion, gevent etc at original versions) connector works but tests fail

"results" keyerror
possible cause:
database locking up? resolved by reversing everything new checkout?
check log for exceptions:
#<checkout_dir>/product/vims/test/hi1/logs/gunicorn_test_err.log 
this log shows artefacts from hi1 testing which may be obscuring causes of error
check out vims dev branch
create virtualenv "django-env"
edit conf/dev_requirements.txt to reference your package repository (repository_root/product/vims/packages)
source product/vims/install_packages

Once a suitable virtual environment exists: 
run product/vims/deploy_files/bin/./deploy_test

source /usr/local/bin/reset_test_db.sh
run product/vims/tests/rest/all_tests.py (rest test)

----

files used to create different package combinations:

#vims/deploy_files/provision.yml
provision script which sets up distribute and installs from packages directory (doesn't upgrade) according to a requirements file. should run /usr/local/bin/reset_test_db.sh to reset database (may solve database lock)

#Vims/conf/{dev,test}_requirements.txt
requirements files that can specify specific package versions

#Vims/install_packages
when running a new virtual environment, execute this to install packages from vims/packages using requirements  file vims/conf/dev_requirements.txt

----

where to run the tests:

#Vims/tests/rest/all_tests.py 

----

baseline test run:

check out vims dev branch (alternatively: sub diff -d vims vims/ (compares branches), rm <forcing a recursive> vims/; sub up vims/)
create virtualenv "django-env"
edit conf/dev_requirements.txt to reference your package repository (repository_root/product/vims/packages)
source product/vims/install_packages

Once a suitable virtual environment exists: 
run product/vims/deploy_files/bin/./deploy_test

source /usr/local/bin/reset_test_db.sh
run product/vims/tests/rest/all_tests.py (rest test)

----

testing procedure:

change provision.yml, {dev,test}_requirements.txt & install_packages to originals: reset_files.sh
run original procedure: run_original.sh

if this does not succeed, update files to branch versions, remove vims directory and start again creating an environment by hand and resetting database by hand. reverts package directory

when this is working do incremental changes with links to new/old files, testing between changes

1 ensure system setuptools is 3.4.4, change distribute to version 0.7.3 in provision.yml & requirements files
2 change install_packages to use test_requirements, remove --update option from install command
3 just upgrade django

Process should enable us to evaluate how much work is needed to change to upgraded version
simplify tests to the minimum, obtain repeatable errors, 
connector is related to the core and should be disabled in tests
possibly better to test manually by hand through GUI to obtain more informative error messages/logging
first breakdown tests to most simple one, edited tests archived in 6639?.

----
Instructions for setting up REST tests for VIMS:
source product/vims/install_packages.sh

Once a suitable virtual environment exists: 
run product/vims/deploy_files/bin/./deploy_test
(that should now reset database)

#source /usr/local/bin/reset_test_db.sh

seems to be down to specific packages being upgraded
tried removing half and connector seems to connect

deploy scripts ansible requires a number of packages which are not yet installed
therefore have to run install_packages first
for example yaml & Jinja2

Run install_packages

update environment and base versions of setuptools & distribute
refusing to converts between file and link
making python  paths consistent in provision/deploy_dev

Check /usr/lib/py…/site-packages/... for pkg_resources

is this is to do with making paths consistent? can we remove this?

since setuptool 0.7 no longer need separate distribute package

distribute 0.7.3 is a legacy wrapper, we should try to remove the need for this

should we? Pip install setuptools 3.4.4

Upgrades:

install setuptools 3.4.4 as system package & virtualenv
upgrade distribute
##install pip 1.5.4
ensure ansible is installed @/usr/bin/

Can we do this by just listing 
pip install --no-in… -U setuptools.
run tests

(don't think I ran reset script this time…***)


starting from scratch:

+----
230414

Django environment set up for 1.6 & 1.5
site runs fine for 1.5 
(move apps directory changes to 6640 branch (avoiding any .svn dirs; cp -r <b#6639:/apps/domains> <b#6640:/apps/> domains, also copy the following: warrants/models.py tasks/models.py), backup then remove apps directory on branch 6639 then run sub update, alternatively if in rush: cd project_source; tar -cf ~/bkvims.tar vims; rm -rf vims; sub up)

some updates to Django 1.6 compatible packages not possible because of old distribute/setuptools/pip versions
with new version problem with adding a task
don't want to have to go through GUI\ to run the tests manually...

cannot run rest tests for reggression testing purposes

angular:
after following wiki "adding example feature"
how to get new features to turn up on the bar at the top

----
160414

using very old pip 1.2.1 (1.5.4 is current)
manual update packages
problem with installing PyYAML

Manually installed packages not named distribute,setup tools, Django*…

Application seems to work.
Updated dev_requirements.txt in project_source/conf/
added extra packages to project_source/packages/
(now contains a superset) but don't know where these are pulled from?

Strange behaviour when adding a task? Symptom seems to have appeared since moving to Django 1.6
output from WebServer: POST /tasks/api/create/ HTTP/1.1" 400 173

When running this with Django 1.5, when you save  comes up with task saved to warrant
output from WebServer: POST /tasks/api/create/ HTTP/1.1" 200 2277

----
update required due to optimisations  in database interaction

Django update:
new requirements.txt, 
create a new environment with --copy-all to make it self-contained.
install from requirements file, old package versions
pip install --upgrade <package_names>
new package is should then be contained within .pip dir
can then transfer env folder to different system
edit wiki with Django update page

----
150414

--– Copy all didn't seem to work

Upgrade packages within environment
refer to fast install in pip help to see how to install from local
so do freeze local and then run command to save these packages locally.
copy requirements and package repository

Django-Nose-selenium 0.7.5 seems to not be found in normal repositories, deprecated since django 1.4, selnose iz potential replacement package

new requirements file stop @ requests, needs completing

Restart from fresh virtual …