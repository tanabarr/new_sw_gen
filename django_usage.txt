django usage

paradigms: 
models and objects:
model class >> database table
model class instance >> database record in table

django installed on cygwin using virtual environment:
virtualenv+ wrapper
changed my project directory, ensure WORKON environmental variables are set up correctly
do "workon <project directory enabled through virtualenv>"
installation tutorial:
file://us-oakland/home11/tan/literature/py_djan_cyg.htm

shell prompt should change and then we reside in project environment

setup project in django:
tutorial:
file://us-oakland/home11/tan/literature/Writing%20your%20first%20Django%20app,%20part%201%20%20%20Django%20documentation%20%20%20Django.htm

in the virtual environment, django, easy install, python and pip are installed (not using the host's executables)

inside virtual environment project folder, run
 >> django-admin.py startproject <project name>
change into this directory and then to test, run
 >> python manage.py runserver
open browser and navigate to the address listed in the output from the previous command (e.g. 127.0.0.1:8000)
should say congratulations message...

the virtualenv packages useful to isolate environment so that different versions of binaries can be used for the web development than on the host system.

Inside django project, edit settings file to reflect the database location you want to use
(for example if I'm running the project in a virtual environment within cygwin and my Windows laptop, may not want to use local database, use 192.168.1.199,tan, old work password instead)

/*****************************************//*****************************************/
following tutorial:


>>> Poll.objects.filter(question__startswith='What')
[<Poll: What's up?>]

This doesn't work.. Question_starts… Is unrecognised

/*****************************************//*****************************************/
setting up a new project (reference: django_ setup_hist.TXT)

when copying template directory, if using a virtual environment, probably find somewhere under the lib/python2.x/django/contrib… Rest of the information is in the tutorial
after setting up admin and user interfaces, complete four pages of tutorial, now transition to new project (new virtualenv environment: follow the link:
file:///U:/literature/py_djan_cyg.htm
 >> mkvirtualenv --no-site-packages myproject
to set up the environment within the virtualenv base directory (projects)
 >> workon myproject
 >> cd myproject
 >> easy_install pip
 >> pip install django
(took two tries)
follow set up above ("inside virtual environment project folder, run…")
With different project name and relevant directories (XXproject, XXsite)

Can specify python version used with new environment using virtualenv2.x...
virtualenv ... -p 2.x
should be notified about upgrade of  python executables and initialisation script

will write scripts etc using specified python version
executables need to be updated to use new python version
when upgrading to py2.7, required to use easy_install-2.7 in the base user environment. Use this to install pip (again in the base environment). This does not automatically update the executable versions in bin. Best to just remove these first in the virtual environment before installing using the updated tools.
Also install Django through pip-2. then web server can be up and running (in tadminserver/mysite).
Directory structure is virtual(env) directory (projects)/virtual environment (tadminproject)/website directory (mysite)

administrator site login
tan
password: password

/*****************************************//*****************************************/
----
020414

New environment: rest_test_env

installing a new Django environment, follow standard virtual environment set up (virtualenv_usage.txt)
>pip list
>Pip search django
>pip install django==1.5
install the rest framework
>pip install djangorestframework==2.3.6
start the project and run
>Django-admin.py startproject site1
>cd site1
>python manage.py runserver
can then navigate to local host: 8000 to see the test page

Copied across projects/myproject/mysite/{polls} application directory and projects/myproject/sitetemplates 
edited in place Envs/rest_test_env/site1/site1  files including urls,settings to take into account relevant file changes in projects/myproject/mysite/mysite/*
mainly regarding the linking of the site to the polls model

In order to build database objects mapped to buy the provided models, run:
>python manager.py syncdb


If receiving the resource temporarily unavailable error, try closing the webpage and try to run runserver again.
This unfortunate doesn't was do the trick, investigate rebaseall (to do)

Do requirements capture for the environment 
>Pip freeze --local

----
transplanting to ub 1204tom:

make virtual environment,use the correct instructions
install environment using pip install -r <requirements_file>
after environment is working correctly, copy across files, ee.it settings.y to specify correct location for database file
>syncdb
>runserver 0.0.0.0:8000 to make available on all public IP 's
navigate to http://ub1204tom:8000/polls/

----
making model changes
3 steps:
change models.py 
 >> python manage.py makemigrations 
(to create migrations from this changes)
 >> python manage.py migrate 
(to apply those changes to the database)

----
Exploring apih with the shell

 >> python manage.py shell
this automatically sets the import path to the settings module

dbshell gives your database prompt
e.g. with sqlite3
 >> ...dbshell (as before)
 >> tables
 >> .schema <tablename>
etc.
----
How to present a list of strings from provided source? 

----
Serialisers and views

Views are activated by URL changes
these can call serialisers to convert between the python objects and JSON objects or just perform direct actions

Perform things like validation in serialisers
perform things like tasks not provided by model in view
l