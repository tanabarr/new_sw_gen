MySQL development notes

MySQL C API

When using prepared statements, length of objects can be retrieved before fetching the actual object by binding the columns (all columns need to be bound before calling fetch). When binding in this initial phase, bind structure members buffer and buffer length are set to 0 while length is assigned a pointer to an unsigned long integer which is populated with the size, in bytes, of the object when fetch is called.

Once this "real length" as been retrieved, columns can be fetched sequentially from this row (rows are iterated through using the "fetch" API call). Bind each column at a time before calling "fetch_column" with the relevant column number.

Note that for some reason on the fetch_column call the length bind structure member does not seem to be populated??

is_null indicates whether the output column value is NULL.

is_unsigned should be used to explicitly state the signed-ness, in conjunction with "unsigned char" datatype for example. 

Don't forget to rebind result buffers once changed. (before calling fetch column each time)??

Don't forget to free_result and stmt_free_result for meta data  and statement respectively. This should probably be performed when closing down (prepare will reset statement object if necessary)

binding only lengths for all columns, 
fetch lengths,
test type,
process length and meta data,
bind result buffers and fetch column, 
retrieved descriptor /string,
/*****************************************//*****************************************/

Using meta data:
prepare
execute statement
get field account from statement
if more than zero fields 
	fetch meta data 
	fetch field objects
	allocate bind object for each column (make global) 
	initialised bind object to 0 
	assign field type from field objects
	
( on every new row) bind all columns and all values (not necessarily to buffers, zero length buffer) (bind result) include type, error, isnull and isunsigned
fetch
print results
(on every new column) update buffers for current column
fetch col repeat (no need to bind results, only do this before each fetch)
set buffer back to 0 after each fetch column action (and use of buffer)
any parts of the buffer that return information should be assigned pointers to the relevant variables before any fetch

if we want to fetch the whole row, assign each column a field type, allocate the correct buffer type and any flags, .\point the buffer at the allocated memory, give the memory size as buffer length (this doesn't give us the exact length of buffer first)



getting field type:
this is either done for all columns at once before a single fetch or per column fetch (probably best done for all columns at once for a single fetch so the values can be bound)
Case statements for setting up destination data buffers and sizes either executed every row or every column fetch.
p3341

NOTE: passing put through specialised type: wchar_t, needs to be pointer type?
